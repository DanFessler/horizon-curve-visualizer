{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["canvasWidth","canvasHeight","App","state","ctx","renderCanvas","_this","clearRect","strokeStyle","beginPath","arc","getPixelRadius","Math","PI","stroke","moveTo","lineTo","handleAltitudeChange","e","params","alt","max","target","value","handleFOVChange","fov","min","getHorizonDistance","altitude","getAltitude","unit","radius","getEarthRadius","sqrt","pow","getHorizonLength","tan","units","halfLength","this","setState","refs","canvas","getContext","resultUnits","react_default","a","createElement","className","href","style","display","paddingRight","name","type","onChange","onClick","select","height","boxSizing","border","position","padding","toFixed","ref","width","Component","view","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.270b20d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { view } from \"react-easy-state\";\r\nimport { params } from \"react-easy-params\";\r\nimport \"./App.css\";\r\n\r\nconst canvasWidth = 1024;\r\nconst canvasHeight = 768;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ctx: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ctx: this.refs.canvas.getContext(\"2d\") });\r\n    params.fov = params.fov ? params.fov : 60;\r\n    params.alt = params.alt ? params.alt : 0;\r\n    params.unit = params.unit ? params.unit : \"miles\";\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderCanvas();\r\n  }\r\n\r\n  renderCanvas = () => {\r\n    const ctx = this.state.ctx;\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.strokeStyle = \"rgba(0, 0, 0, 1)\";\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      canvasWidth / 2,\r\n      canvasHeight / 2 + this.getPixelRadius(),\r\n      this.getPixelRadius(),\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.stroke();\r\n    ctx.strokeStyle = \"rgba(0, 0, 0, 0.125)\";\r\n    ctx.moveTo(0, canvasHeight / 2 - 0.5);\r\n    ctx.lineTo(canvasWidth, canvasHeight / 2 - 0.5);\r\n    ctx.stroke();\r\n  };\r\n\r\n  handleAltitudeChange = e => {\r\n    // this.setState({ altitude: Math.max(e.target.value, 0) });\r\n    params.alt = Math.max(e.target.value, 0);\r\n  };\r\n  handleFOVChange = e => {\r\n    // this.setState({ fov: Math.max(Math.min(e.target.value, 180), 1) });\r\n    params.fov = Math.max(Math.min(e.target.value, 175), 1);\r\n  };\r\n  getHorizonDistance = () => {\r\n    const altitude = Math.max(this.getAltitude(params.unit), 0.001);\r\n    const radius = this.getEarthRadius();\r\n    return Math.sqrt(Math.pow(altitude, 2) + 2 * radius * altitude);\r\n  };\r\n  getHorizonLength = () => {\r\n    const fov = Math.min(params.fov, 179.9) * (Math.PI / 180);\r\n    const distance = this.getHorizonDistance();\r\n    return distance * Math.tan(fov / 2) * 2;\r\n  };\r\n  getEarthRadius = () => {\r\n    return 3959;\r\n  };\r\n  getAltitude = units => {\r\n    switch (units) {\r\n      case \"feet\":\r\n        return params.alt / 5280;\r\n      case \"meters\":\r\n        return params.alt / 1609.34;\r\n      case \"kilometers\":\r\n        return params.alt / 1.60934;\r\n      default:\r\n        // miles\r\n        return params.alt;\r\n    }\r\n  };\r\n  getPixelRadius = () => {\r\n    const radius = this.getEarthRadius();\r\n    const halfLength = this.getHorizonLength() / 2;\r\n    const halfWidth = canvasWidth / 2;\r\n    // const result = (radius / halfLength) * halfWidth\r\n    const result = (halfWidth * radius) / halfLength;\r\n    // const result = 1000;\r\n    // console.log(result);\r\n    return result;\r\n  };\r\n  render() {\r\n    let resultUnits =\r\n      params.unit === \"feet\" || params.unit === \"miles\"\r\n        ? \"miles\"\r\n        : \"kilometers\";\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Horizon Curvature Visualizer</h1>\r\n        Source code:{\" \"}\r\n        <a href=\"https://github.com/DanFessler/horizon-curve-visualizer\">\r\n          https://github.com/DanFessler/horizon-curve-visualizer\r\n        </a>\r\n        <p>\r\n          This is a visualizer to give you a rough idea of how curved the\r\n          horizon should appear at a given altitude with a known camera FOV.\r\n          <br />\r\n          This is a work in progress and will continue to be improved. It makes\r\n          some estimates and does not take into account fish eye lenses for the\r\n          sake of simplicity.\r\n        </p>\r\n        <br />\r\n        <div style={{ display: \"flex\" }}>\r\n          <div style={{ paddingRight: 32 }}>\r\n            <label>HFOV:</label>\r\n            <br />\r\n            <input\r\n              name=\"FOV\"\r\n              type=\"number\"\r\n              value={params.fov}\r\n              onChange={this.handleFOVChange}\r\n              onClick={e => e.target.select()}\r\n            />\r\n            <i> degrees</i>\r\n          </div>\r\n          <div>\r\n            <label>Altitude:</label>\r\n            <br />\r\n            <input\r\n              style={{ height: 21, boxSizing: \"border-box\" }}\r\n              name=\"altitude\"\r\n              type=\"number\"\r\n              value={params.alt}\r\n              onChange={this.handleAltitudeChange}\r\n              onClick={e => e.target.select()}\r\n            />\r\n            {/* <i> miles</i> */}\r\n            <select\r\n              style={{ height: 21, boxSizing: \"border-box\" }}\r\n              onChange={e => (params.unit = e.target.value)}\r\n              value={params.unit}\r\n            >\r\n              <option value=\"feet\">feet</option>\r\n              <option value=\"miles\">miles</option>\r\n              <option value=\"meters\">meters</option>\r\n              <option value=\"kilometers\">kilometers</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div\r\n          style={{\r\n            border: \"1px solid gray\",\r\n            display: \"inline-block\"\r\n          }}\r\n        >\r\n          <div style={{ position: \"absolute\", padding: 8 }}>\r\n            Horizon Distance: &nbsp;\r\n            {this.getHorizonDistance(this.getAltitude(resultUnits)).toFixed(\r\n              2\r\n            )}{\" \"}\r\n            {resultUnits}\r\n            <br />\r\n            Horizon length: &nbsp;\r\n            {this.getHorizonLength(this.getAltitude(resultUnits)).toFixed(\r\n              2\r\n            )}{\" \"}\r\n            {resultUnits}\r\n            <br />\r\n          </div>\r\n          <canvas ref=\"canvas\" width={canvasWidth} height={canvasHeight} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default view(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}