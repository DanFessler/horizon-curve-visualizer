{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["canvasWidth","canvasHeight","App","state","ctx","renderCanvas","_this","clearRect","strokeStyle","beginPath","arc","getPixelRadius","Math","PI","stroke","moveTo","lineTo","ypos","getDropAngle","getVerticalFOV","textAlign","fillText","params","fov","handleAltitudeChange","e","alt","max","target","value","handleFOVChange","min","getHorizonDistance","altitude","getAltitude","unit","radius","getEarthRadius","sqrt","pow","getHorizonLength","tan","units","halfLength","asin","this","setState","refs","canvas","getContext","resultUnits","react_default","a","createElement","className","href","style","display","paddingRight","name","type","onChange","onClick","select","height","boxSizing","border","position","padding","toFixed","ref","width","Component","view","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ddb73fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { view } from \"react-easy-state\";\r\nimport { params } from \"react-easy-params\";\r\nimport \"./App.css\";\r\n\r\nconst canvasWidth = 1024;\r\nconst canvasHeight = 768;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ctx: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ctx: this.refs.canvas.getContext(\"2d\") });\r\n    params.fov = params.fov ? params.fov : 60;\r\n    params.alt = params.alt ? params.alt : 0;\r\n    params.unit = params.unit ? params.unit : \"miles\";\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderCanvas();\r\n  }\r\n\r\n  renderCanvas = () => {\r\n    const ctx = this.state.ctx;\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.strokeStyle = \"rgba(0, 0, 0, 1)\";\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      canvasWidth / 2,\r\n      canvasHeight / 2 + this.getPixelRadius(),\r\n      this.getPixelRadius(),\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.stroke();\r\n\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"rgba(0, 0, 0, 0.125)\";\r\n    ctx.moveTo(0, canvasHeight / 2 - 0.5);\r\n    ctx.lineTo(canvasWidth, canvasHeight / 2 - 0.5);\r\n    ctx.stroke();\r\n\r\n    let ypos =\r\n      canvasHeight / 2 -\r\n      0.5 -\r\n      (this.getDropAngle() / this.getVerticalFOV()) * canvasHeight;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"rgba(0, 0, 0, 0.25)\";\r\n    ctx.moveTo(0, ypos);\r\n    ctx.lineTo(canvasWidth, ypos);\r\n    ctx.stroke();\r\n\r\n    ctx.textAlign = \"end\";\r\n    ctx.fillText(\"Level\", canvasWidth - 8, ypos - 8);\r\n  };\r\n\r\n  getVerticalFOV = () => {\r\n    return (params.fov * canvasHeight) / canvasWidth;\r\n  };\r\n\r\n  handleAltitudeChange = e => {\r\n    // this.setState({ altitude: Math.max(e.target.value, 0) });\r\n    params.alt = Math.max(e.target.value, 0);\r\n  };\r\n  handleFOVChange = e => {\r\n    // this.setState({ fov: Math.max(Math.min(e.target.value, 180), 1) });\r\n    params.fov = Math.max(Math.min(e.target.value, 175), 1);\r\n  };\r\n  getHorizonDistance = () => {\r\n    const altitude = Math.max(this.getAltitude(params.unit), 0.001);\r\n    const radius = this.getEarthRadius();\r\n    // return Math.sqrt(Math.pow(altitude, 2) + 2 * radius * altitude);\r\n    return Math.sqrt(Math.pow(radius + altitude, 2) - Math.pow(radius, 2));\r\n  };\r\n  getHorizonLength = () => {\r\n    const fov = Math.min(params.fov, 179.9) * (Math.PI / 180);\r\n    const distance = this.getHorizonDistance();\r\n    return distance * Math.tan(fov / 2) * 2;\r\n  };\r\n  getEarthRadius = () => {\r\n    return 3959;\r\n  };\r\n  getAltitude = units => {\r\n    switch (units) {\r\n      case \"feet\":\r\n        return params.alt / 5280;\r\n      case \"meters\":\r\n        return params.alt / 1609.34;\r\n      case \"kilometers\":\r\n        return params.alt / 1.60934;\r\n      default:\r\n        // miles\r\n        return params.alt;\r\n    }\r\n  };\r\n  getPixelRadius = () => {\r\n    const radius = this.getEarthRadius();\r\n    const halfLength = this.getHorizonLength() / 2;\r\n    const halfWidth = canvasWidth / 2;\r\n    // const result = (radius / halfLength) * halfWidth\r\n    const result = (halfWidth * radius) / halfLength;\r\n    // const result = 1000;\r\n    // console.log(result);\r\n    return result;\r\n  };\r\n\r\n  getDropAngle = () => {\r\n    return (\r\n      Math.asin(\r\n        this.getHorizonDistance() /\r\n          (this.getEarthRadius() + this.getAltitude(params.unit))\r\n      ) *\r\n      (180 / Math.PI)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let resultUnits =\r\n      params.unit === \"feet\" || params.unit === \"miles\"\r\n        ? \"miles\"\r\n        : \"kilometers\";\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Horizon Curvature Visualizer</h1>\r\n        Source code:{\" \"}\r\n        <a href=\"https://github.com/DanFessler/horizon-curve-visualizer\">\r\n          https://github.com/DanFessler/horizon-curve-visualizer\r\n        </a>\r\n        <p>\r\n          This is a visualizer to give you a rough idea of how curved the\r\n          horizon should appear at a given altitude with a known camera FOV.\r\n          <br />\r\n          This is a work in progress and will continue to be improved. It makes\r\n          some estimates and does not take into account fish eye lenses for the\r\n          sake of simplicity.\r\n        </p>\r\n        <br />\r\n        <div style={{ display: \"flex\" }}>\r\n          <div style={{ paddingRight: 32 }}>\r\n            <label>HFOV:</label>\r\n            <br />\r\n            <input\r\n              name=\"FOV\"\r\n              type=\"number\"\r\n              value={params.fov}\r\n              onChange={this.handleFOVChange}\r\n              onClick={e => e.target.select()}\r\n            />\r\n            <i> degrees</i>\r\n          </div>\r\n          <div>\r\n            <label>Altitude:</label>\r\n            <br />\r\n            <input\r\n              style={{ height: 21, boxSizing: \"border-box\" }}\r\n              name=\"altitude\"\r\n              type=\"number\"\r\n              value={params.alt}\r\n              onChange={this.handleAltitudeChange}\r\n              onClick={e => e.target.select()}\r\n            />\r\n            {/* <i> miles</i> */}\r\n            <select\r\n              style={{ height: 21, boxSizing: \"border-box\" }}\r\n              onChange={e => (params.unit = e.target.value)}\r\n              value={params.unit}\r\n            >\r\n              <option value=\"feet\">feet</option>\r\n              <option value=\"miles\">miles</option>\r\n              <option value=\"meters\">meters</option>\r\n              <option value=\"kilometers\">kilometers</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div\r\n          style={{\r\n            border: \"1px solid gray\",\r\n            display: \"inline-block\"\r\n          }}\r\n        >\r\n          <div style={{ position: \"absolute\", padding: 8 }}>\r\n            Horizon Distance: &nbsp;\r\n            {this.getHorizonDistance(this.getAltitude(resultUnits)).toFixed(\r\n              2\r\n            )}{\" \"}\r\n            {resultUnits}\r\n            <br />\r\n            Horizon length: &nbsp;\r\n            {this.getHorizonLength(this.getAltitude(resultUnits)).toFixed(\r\n              2\r\n            )}{\" \"}\r\n            {resultUnits}\r\n            <br />\r\n            Drop Angle: &nbsp;\r\n            {this.getDropAngle().toFixed(2)} Degrees\r\n            <br />\r\n          </div>\r\n          <canvas ref=\"canvas\" width={canvasWidth} height={canvasHeight} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default view(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}