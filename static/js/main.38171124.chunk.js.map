{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","canvasWidth","canvasHeight","App","state","ctx","altitude","fov","renderCanvas","_this","Math","PI","clearRect","strokeStyle","beginPath","arc","getPixelRadius","stroke","moveTo","lineTo","handleAltitudeChange","e","setState","max","target","value","handleFOVChange","min","getHorizonDistance","getAltitude","radius","getEarthRadius","sqrt","pow","getHorizonLength","tan","halfLength","result","console","log","this","refs","canvas","getContext","react_default","a","createElement","className","href","name","type","onChange","style","border","display","position","padding","toFixed","ref","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38171124.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst canvasWidth = 1024;\nconst canvasHeight = 768;\n\nclass App extends Component {\n  state = {\n    ctx: null,\n    altitude: 0,\n    fov: 60\n  };\n\n  componentDidMount() {\n    this.setState({ ctx: this.refs.canvas.getContext(\"2d\") });\n  }\n\n  componentDidUpdate() {\n    this.renderCanvas();\n  }\n\n  renderCanvas = () => {\n    const ctx = this.state.ctx;\n\n    let hHOV = (this.state.fov * (Math.PI / 180)) / 2;\n\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    ctx.strokeStyle = \"rgba(0, 0, 0, 1)\";\n    ctx.beginPath();\n    ctx.arc(\n      canvasWidth / 2,\n      canvasHeight / 2 + this.getPixelRadius(),\n      this.getPixelRadius(),\n      0,\n      2 * Math.PI\n    );\n    ctx.stroke();\n    ctx.strokeStyle = \"rgba(0, 0, 0, 0.125)\";\n    ctx.moveTo(0, canvasHeight / 2 - 0.5);\n    ctx.lineTo(canvasWidth, canvasHeight / 2 - 0.5);\n    ctx.stroke();\n  };\n\n  handleAltitudeChange = e => {\n    this.setState({ altitude: Math.max(e.target.value, 0) });\n  };\n  handleFOVChange = e => {\n    this.setState({ fov: Math.max(Math.min(e.target.value, 180), 1) });\n  };\n  getHorizonDistance = () => {\n    const altitude = Math.max(this.getAltitude(), 0.001);\n    const radius = this.getEarthRadius();\n    return Math.sqrt(Math.pow(altitude, 2) + 2 * radius * altitude);\n  };\n  getHorizonLength = () => {\n    const fov = Math.min(this.state.fov, 179.9) * (Math.PI / 180);\n    const distance = this.getHorizonDistance();\n    return distance * Math.tan(fov / 2) * 2;\n  };\n  getEarthRadius = () => {\n    return 3959;\n  };\n  getAltitude = () => {\n    return this.state.altitude;\n  };\n  getPixelRadius = () => {\n    const radius = this.getEarthRadius();\n    const halfLength = this.getHorizonLength() / 2;\n    const halfWidth = canvasWidth / 2;\n    // const result = (radius / halfLength) * halfWidth\n    const result = (halfWidth * radius) / halfLength;\n    // const result = 1000;\n    console.log(result);\n    return result;\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Horizon Curvature Visualizer</h1>\n        Source code:{\" \"}\n        <a href=\"https://github.com/DanFessler/horizon-curve-visualizer\">\n          https://github.com/DanFessler/horizon-curve-visualizer\n        </a>\n        <p>\n          This is a visualizer to give you a rough idea of how curved the\n          horizon should appear at a given altitude with a known camera FOV.\n          <br />\n          This is a work in progress and will continue to be improved. It makes\n          some estimates and does not take into account fish eye lenses for the\n          sake of simplicity.\n        </p>\n        <br />\n        <p>\n          <label>FOV:</label>\n          <input\n            name=\"FOV\"\n            type=\"number\"\n            value={this.state.fov}\n            onChange={this.handleFOVChange}\n          />\n          <i> degrees</i>\n        </p>\n        <p>\n          <label>Altitude:</label>\n          <input\n            name=\"altitude\"\n            type=\"number\"\n            value={this.state.altitude}\n            onChange={this.handleAltitudeChange}\n          />\n          <i> miles</i>\n        </p>\n        <div\n          style={{\n            border: \"1px solid gray\",\n            display: \"inline-block\"\n          }}\n        >\n          <div style={{ position: \"absolute\", padding: 8 }}>\n            Horizon Distance: &nbsp;\n            {this.getHorizonDistance(this.state.altitude).toFixed(2)} miles\n            <br />\n            Horizon length: &nbsp;\n            {this.getHorizonLength(this.state.altitude).toFixed(2)} miles\n            <br />\n          </div>\n          <canvas ref=\"canvas\" width={canvasWidth} height={canvasHeight} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}